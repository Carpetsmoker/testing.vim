#!/bin/sh
#
# testing.vim; https://github.com/Carpetsmoker/testing.vim
#

set -euC

prefix=$(cd -P "$(dirname "$0")" >/dev/null && pwd)
tvim="$prefix/tvim.vim"

# Set up tmpdir
tmpdir=$(mktemp -d -p "${TMPDIR:-/tmp}" testing.vim.XXXXXXX)
mkdir -p "$tmpdir"
trap 'rm -r "$tmpdir"' EXIT

_err() {
	>&2 echo "${0##*/}: $@"
}

_usage() {
	echo "Usage: ${0##*/} command [flags]"
	echo
	echo "Commands:"
	echo "  test        Run tests."
	echo "  lint        Run linter tools."
	echo "  bench-syn   Bench syntax highlighting."
	echo "  gen-syn     Generate a syntax highlighting test."
	echo "  help        Display more help about a command."
	echo
	echo "Environment:"
	echo "  TEST_VIM   Binary to use; defaults to 'vim'."
}

_usage_test() {
	echo "Usage: ${0##*/} test [-vVc] [-r pattern] [-b path] [-p path] [targets...]"
	echo
	echo "Options:"
	echo "  -v         Enable verbose output."
	echo
	echo "  -V         Run vim with -V20 (very verbose)."
	echo
	echo "  -r patt    Run only the test functions matching the pattern. Patterns are"
	echo "             matched against the function name (including Test_) with =~#"
	echo
	echo "  -b patt    Run benchmarks functions matching this patterns. Patterns are"
	echo "             matched against the function name (including Benchmark_) with =~#"
	echo
	echo "  -c         Report code coverage. This requires covimerage in PATH:"
	echo "             https://github.com/Vimjas/covimerage"
	echo
	echo "  -p path    Write code coverage profile to path. This is a Coverage.py file:"
	echo "             https://github.com/nedbat/coveragepy"
	echo
	echo "  targets    Files or directories to test. If it is a directory all *_test.vim"
	echo "             files in that directory will be run. Test files in subdirectories"
	echo "             will also be run if the pattern ends with '/...'"
}

_usage_lint() {
	echo "Usage: ${0##*/} lint [-t tools] [targets...]"
	echo
	echo "Options:"
	echo "  -t [list]  Comma-separated list of tools to run; supported tools:"
	echo "               vint: https://github.com/Kuniwak/vint"
	echo "                     You can add a .vintrc.yaml to configure it."
	echo
	echo "             Default is to run all tools."
	echo
	echo "  targets    Files or directories to check. If it is a directory all *.vim"
	echo "             files in that directory will be run. Files in subdirectories"
	echo "             will also be checked if the pattern ends with '/...'"
}

_usage_bench_syn() {
	echo "Usage: ${0##*/} bench-syn"
	echo
	echo "TODO"
}

_usage_gen_syn() {
	echo "Usage: ${0##*/} gen-syn"
	echo
	echo "TODO"
}

_run_test() {
	verbose=0
	vim_verbose=""
	coverage=0
	profile=""
	run=""
	bench=""
	while getopts "vVcr:p:b:" option; do
		case "$option" in
			v) verbose=1 ;;
			V) vim_verbose="-V20" ;;
			r) run=$OPTARG ;;
			b) bench=$OPTARG ;;
			c) coverage=1 ;;
			p)
				coverage=1
				profile=$OPTARG
				;;
			*)
				_usage_test
				exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))

	if [ "$coverage" -eq 1 ] && ! command -v covimerage >/dev/null; then
		_err  "covimerage tool not found; install it with:"
		_err  "  pip install covimerage"
		_err  "also see https://github.com/Vimjas/covimerage"
		exit  1
	fi

	# Get path
	# shellcheck disable=SC2039
	local target="$@"
	[ -z "$target" ] && target="."
	test_files=$(find_files '*_test.vim' "$@")

	### Run tests.
	##############
	# Clean stale log file.
	[ -f "$tmpdir/test.log" ]        && rm "$tmpdir/test.log"
	[ -f "$tmpdir/FAILED" ]          && rm "$tmpdir/FAILED"
	[ -f "$tmpdir/cov-profile.txt" ] && rm "$tmpdir/cov-profile.txt"
	[ -f "$tmpdir/cov-report.txt" ]  && rm "$tmpdir/cov-report.txt"

	# Generate code coverage report.
	vim_cmd=${TEST_VIM:-vim}
	if [ "$coverage" -eq 1 ]; then
		vim_cmd="covimerage -q run --data-file $tmpdir/cov-profile.data --report-file $tmpdir/cov-profile.txt --append $vim_cmd"
	fi

	# Run the actual tests.
	packdir="$tmpdir/pack/t/start/$(ls "$tmpdir/pack/t/start")"
	for test_file in $test_files; do
		IFS="$(printf ' \n')"
		test_file="${test_file#./}"

		$vim_cmd --noplugin -u NONE -N $vim_verbose -e \
			+"set shm+=WAFI rtp^=$packdir packpath=$tmpdir" \
			+'packloadall!' \
			+"silent e $test_file" \
			+"let g:test_verbose=$verbose" \
			+"let g:test_tmpdir='$tmpdir' | let g:test_packdir='$packdir'" \
			+"let g:test_run='$run' | let g:test_bench='$bench'" \
			-S "$tvim" \
			+':call Tvim_Test()' </dev/null || (
			# If Vim exits with non-0 it's almost certainly a bug in the test runner;
			# should never happen in normal usage.
			# TODO: not all messages are always shown; i.e. if the error is "too
			# fatal" to be written to test.tmp.
			#
			# With -V they show as e.g.:
			# Error detected while processing /data/code/vim/testing.vim/runtest.vim:
			# line   94:
			# E461: Illegal variable name: l:failedTEST RUNNER FAILURE; error in runtest.vim
			#
			# So try grepping that, maybe?
			_err 'TEST RUNNER FAILURE; error in runtest.vim'
			[ -f "$tmpdir/test.tmp" ] && cat "$tmpdir/test.tmp"
			exit 5
		)

		# Append logs
		if [ "$coverage" -eq 1 ]; then
			cov=$(grep "${test_file%_test.vim}.vim" "$tmpdir/cov-profile.txt" | awk '{print $4}')
			printf "  coverage: $cov% of statements" >>"$tmpdir/test.tmp"
		fi

		echo >>"$tmpdir/test.tmp"
		tee "$tmpdir/test.log" <"$tmpdir/test.tmp"
		rm "$tmpdir/test.tmp"
	done

	if [ -n "$profile" ]; then
		covimerage xml --omit '*_test.vim' --data-file "$tmpdir/cov-profile.data"
		[ "$profile" != "coverage.xml" ] && mv coverage.xml "$profile"
	fi

	exit 0
}

_run_lint() {
	# shellcheck disable=SC2039
	local tools="vint"
	while getopts "t:" option; do
		case "$option" in
			t) tools=$OPTARG ;;
			*)
				_lint_usage
				exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))

	# shellcheck disable=SC2039
	local target="$@"
	[ -z "$target" ] && target="."
	test_files=$(find_files '*.vim' "$@")

	for t in $tools; do
		case "$t" in
			vint)        _run_lint_vint "$test_files" ;;
			#vimlint)     _run_lint_vimlint "$test_files" ;;
			#vimhelplint) _run_lint_vimhelplint "$test_files" ;;
			*)
				_err "unknown lint tool: \`$t'"
				exit 1
		esac
	done
}

_run_lint_vint() {
	# shellcheck disable=SC2039
	local target="$1"

	if [ ! -x "$(command -v vint)" ]; then
		_err "'vint' binary not found; use 'pip install vim-vint' to install it."
		exit 1
	fi

	vint $target
}

_run_lint_vimlint() {
	:
	# vimlint
	# lint=$(sh "$vimdir/share/vim/vimgo/pack/vim-go/start/vim-vimlint/bin/vimlint.sh" \
	# 	-p "$vimdir/share/vim/vimgo/pack/vim-go/start/vim-vimlparser" \
	# 	-l "$vimdir/share/vim/vimgo/pack/vim-go/start/vim-vimlint" \
	# 	-u \
	# 	-c func_abort=1 \
	# 	-e EVL110=1 -e EVL103=1 -e EVL104=1 -e EVL102=1 \
	# 	"$vimgodir" \
	# 	2>&1 ||:)
}

_run_lint_vimhelplint() {
	:
	# vimhelplint
	# lint=$($vimdir/bin/vim -esNR \
	# 	--cmd "set rtp+=$vimdir/share/vim/vimgo/pack/vim-go/start/vim-vimhelplint/" \
	# 	--cmd 'set modeline' \
	# 	+'filetype plugin on' \
	# 	+"e $vimgodir/doc/vim-go.txt" \
	# 	+'verbose VimhelpLintEcho' \
	# 	+q \
	# 	2>&1 ||:)
}

_run_bench_syn() {
	if [ -z "${1:-}" ]; then
		_err "file not set"
		_err "First argument must be a file to benchmark as 'filename:linenr'"
		exit 1
	fi

	file="$(echo "$1" | cut -d : -f 1)"
	line="$(echo "$1" | cut -d : -f 2)"
	if [ -z "$line" ] || [ "$line" = "$file" ]; then
		_err "First argument must be a file to benchmark as 'filename:linenr'"
		exit 1
	fi

	run_count=${2:-"100"}

	RUNBENCH_OUT="$(mktemp -p "${TMPDIR:-/tmp}" testing.vim.XXXXX)"
	export RUNBENCH_OUT
	# TODO: option to keep this file.
	trap 'rm "$RUNBENCH_OUT"' EXIT
	${TEST_VIM:-vim} \
		+"silent e $file" \
		+"normal! ${line}G" \
		+"let g:run_count=$run_count" \
		-S "$tvim" \
		+':call Tvim_BenchSyn()'

	clear
	echo
	echo "$1"
	lines=$(tput lines)
	if [ "$lines" -gt 0 ]; then
		# TODO: inform it's truncated.
		head -n $((lines - 1)) "$RUNBENCH_OUT"
	else
		cat "$RUNBENCH_OUT"
	fi
}

_run_gen_syn() {
	if [ -z "${1:-}" ]; then
		_err "must give at least one test file"
		exit 1
	fi

	if [ "$(link_pack "$@")" -gt 0 ]; then
		_err "could not locate the plugin directory for $@"
		exit 2
	fi

	packdir="$tmpdir/pack/t/start/$(ls "$tmpdir/pack/t/start")"
	for f in "$@"; do
		${TEST_VIM:-vim} --noplugin -u NONE -N -e \
			+"set shm+=WAFI rtp^=$packdir packpath=$tmpdir" \
			+'filetype plugin indent on' \
			+'packloadall!' \
			+"silent e $f" \
			+"let g:test_tmpdir='$tmpdir'" \
			-S "$tvim" \
			+':call Tvim_GenSyn()' >/dev/null </dev/null || (
				_err 'TEST RUNNER FAILURE; error in syntaxtest.vim'
				exit 5
			)
	done

	printf '" This file is automatically generated by test-syntax from testing.vim'

	cat "$tmpdir/syntax.tmp"
}

_run_help() {
	# shellcheck disable=SC2039
	local topic=${1:-}
	case "$topic" in
		test)       _usage_test ;;
		lint)       _usage_lint ;;
		bench-syn)  _usage_bench_syn ;;
		gen-syn)    _usage_gen_syn ;;
		'')         _usage ;;
		*)
			_err "unknown help topic: \`$topic'"
			_usage
			;;
	esac
}

# Find files.
find_files() {
	# shellcheck disable=SC2039
	local pattern=$1
	shift

	# shellcheck disable=SC2039
	local target="$@"

	# shellcheck disable=SC2039
	local files=""
	for t in $target; do
		# Path ends with /...: expand.
		if echo "$t" | grep -q '/\.\.\.$'; then
			find_path="${t%...}"
			find_args="-name $pattern"
		# File or directory.
		elif [ -e "$t" ]; then
			find_path="${t}"
			find_args="-maxdepth 1 -name $pattern"
		else
			_err "no such file or directory: $t"
			exit 1
		fi

		set -f
		# shellcheck disable=SC2086
		files="$files $(find "$find_path" $find_args)"
		set +f
	done

	if [ "$files" = "" ]; then
		_err "no $pattern files in $target"
		exit 3
	fi

	# shellcheck disable=SC2086
	set -f
	if [ "$(link_pack $files)" -gt 0 ]; then
		_err "could not locate the plugin directory for $target"
		exit 2
	fi
	set +f

	echo "$files"
}

# Set up package; find the plugin's root directory and make sure that the plugin
# we're testing is available as a package in $tmpdir.
link_pack() {
	mkdir -p "$tmpdir/pack/t/start"

	IFS="
"
	for f in "$@"; do
		# shellcheck disable=SC2039
		local f="${f#./}"
		# shellcheck disable=SC2039
		local dir
		dir="$(dirname "$f")"

		# shellcheck disable=SC2039
		local pack
		pack="$(cd "$dir" && pwd)"
		while :; do
			if [ "$pack" = "/" ]; then
				printf 1
				return
			fi

			if [ -d "$pack/autoload" ] || [ -d "$pack/plugin" ] || [ -d "$pack/ftplugin" ]; then
				ln -s "$pack" "$tmpdir/pack/t/start"
				printf 0
				return
			fi

			pack="$(dirname "$pack")"
		done
	done

	printf 2
}

cmd="${1:-}"
[ -n "$cmd" ] && shift
case "$cmd" in
	test)       _run_test "$@" ;;
	lint)       _run_lint "$@" ;;
	bench-syn)  _run_bench_syn "$@" ;;
	gen-syn)    _run_gen_syn "$@" ;;
	help)       _run_help "$@" ;;
	'')         _usage; exit 1 ;;
	*)
		_err "unknown command: \`$cmd'"
		_usage
		;;
esac
