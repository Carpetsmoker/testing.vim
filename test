#!/bin/sh

set -euC
testingdir=$(cd -P "$(dirname "$0")" >/dev/null && pwd)

. "$testingdir/shared"

_usage() {
	echo "Usage: ${0##*/} [-hvVc] [-r pattern] [-b path] [-p path] target"
	echo
	echo "Options:"
	echo "  -h       Show this help."
	echo
	echo "  -v       Enable verbose output."
	echo
	echo "  -V       Run vim with -V20 (very verbose)."
	echo
	echo "  -r patt  Run only the test functions matching the pattern. Patterns are"
	echo "           matched against the full function name (including Test_) with =~#"
	echo
	echo "  -b patt  Run benchmarks functions matching this patterns. Patterns are"
	echo "           matched against the full function name (including Benchmark_) with =~#"
	echo
	echo "  -c       Report code coverage. This depends on covimerage being in PATH:"
	echo "           https://github.com/Vimjas/covimerage"
	echo
	echo "  -p path  Write code coverage profile to path. This is a Coverage.py XML file:"
	echo "           https://github.com/nedbat/coveragepy"
	echo
	echo "  target   File or directory to test. If it is a directory all *_test.vim files"
	echo "           in that directory will be run. Test files in subdirectories will also"
	echo "           be run if the pattern ends with '/...'"
}

verbose=0
vim_verbose=""
coverage=0
profile=""
run=""
bench=""
while getopts "hvVcr:p:b:" option; do
	case "$option" in
		h)
			_usage
			exit 0
			;;
		v) verbose=1 ;;
		V) vim_verbose="-V20" ;;
		r) run=$OPTARG ;;
		b) bench=$OPTARG ;;
		c) coverage=1 ;;
		p)
			coverage=1
			profile=$OPTARG
			;;
		*)
			echo "error: unknown option '$option'"
			_usage
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

if [ "$coverage" -eq 1 ] && ! command -v covimerage >/dev/null; then
	echo  "covimerage tool not found; install it with:"
	echo  "  pip install covimerage"
	echo  "also see https://github.com/Vimjas/covimerage"
	exit  1
fi

# Get path
if [ -z "${1:-}" ]; then
	echo "need a file or directory to test"
	exit 1
fi

# TODO: allow multiple paths.
if  [ -n "${2:-}" ]; then
	echo  "Only a single file or directory is supported at the moment. Sorry :-("
	exit  1
fi

testtarget="$1"

### Run tests.
##############
# Clean stale log file.
[ -f "$tmpdir/test.log" ]        && rm "$tmpdir/test.log"
[ -f "$tmpdir/FAILED" ]          && rm "$tmpdir/FAILED"
[ -f "$tmpdir/cov-profile.txt" ] && rm "$tmpdir/cov-profile.txt"
[ -f "$tmpdir/cov-report.txt" ]  && rm "$tmpdir/cov-report.txt"

vim_cmd=vim

# Generate code coverage report.
if [ "$coverage" -eq 1 ]; then
	vim_cmd="covimerage -q run --data-file $tmpdir/cov-profile.data --report-file $tmpdir/cov-profile.txt --append $vim_cmd"
fi

# Run the actual tests.
test_files=$(find_files "$testtarget" '*_test.vim')
packdir="$tmpdir/pack/t/start/$(ls "$tmpdir/pack/t/start")"
for test_file in $test_files; do
	IFS="$(printf ' \n')"

	test_file="${test_file#./}"
	test_dir=$(dirname "$test_file")

	$vim_cmd --noplugin -u NONE -N $vim_verbose -e \
		+"set shm+=WAFI rtp^=$testingdir packpath=$tmpdir" \
		+'filetype plugin indent on' \
		+'packloadall!' \
		+"silent e $test_file" \
		+"let g:test_verbose=$verbose" \
		+"let g:test_tmpdir='$tmpdir' | let g:test_packdir='$packdir'" \
		+"let g:test_run='$run'" \
		+"let g:test_bench='$bench'" \
		-S "$testingdir/syntax.vim" \
		-S "$testingdir/runtest.vim" </dev/null || (
		# If Vim exits with non-0 it's almost certainly a bug in the test runner;
		# should never happen in normal usage.
		# TODO: not all messages are always shown; i.e. if the error is "too
		# fatal" to be written to test.tmp.
		#
		# With -V they show as e.g.:
		# Error detected while processing /data/code/vim/testing.vim/runtest.vim:
		# line   94:
		# E461: Illegal variable name: l:failedTEST RUNNER FAILURE; error in runtest.vim
		#
		# So try grepping that, maybe?
		echo  'TEST RUNNER FAILURE; error in runtest.vim'
		[ -f "$tmpdir/test.tmp" ] && cat "$tmpdir/test.tmp"
		exit 5
	)

	# Append logs
	if [ "$coverage" -eq 1 ]; then
		cov=$(grep "${test_file%_test.vim}.vim" "$tmpdir/cov-profile.txt" | awk '{print $4}')
		printf "  coverage: $cov% of statements" >>"$tmpdir/test.tmp"
	fi

	echo >>"$tmpdir/test.tmp"
	tee "$tmpdir/test.log" <"$tmpdir/test.tmp"
	rm "$tmpdir/test.tmp"
done

if [ -n "$profile" ]; then
	covimerage xml --omit '*_test.vim' --data-file "$tmpdir/cov-profile.data"
	mv coverage.xml "$profile"
fi

exit 0
